"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const node_1 = require("vscode-languageserver/node");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const documentation_1 = require("./documentation");
const dependencies_1 = require("./dependencies");
const handleDocumentSymbol_1 = require("./handlers/handleDocumentSymbol");
const handleInitialize_1 = require("./handlers/handleInitialize");
const handleDidChangeContent_1 = require("./handlers/handleDidChangeContent");
const handleCompletion_1 = require("./handlers/handleCompletion");
const handleCompletionResolve_1 = require("./handlers/handleCompletionResolve");
const handleDefinition_1 = require("./handlers/handleDefinition");
const handleDocumentHighlight_1 = require("./handlers/handleDocumentHighlight");
const handleWorkspaceSymbol_1 = require("./handlers/handleWorkspaceSymbol");
const handleReferences_1 = require("./handlers/handleReferences");
const handleHover_1 = require("./handlers/handleHover");
const handleSemanticTokens_1 = require("./handlers/handleSemanticTokens");
const handleRenameRequest_1 = require("./handlers/handleRenameRequest");
const handlePrepareRename_1 = require("./handlers/handlePrepareRename");
const handleInitialized_1 = require("./handlers/handleInitialized");
const handleDocumentFormatting_1 = require("./handlers/handleDocumentFormatting");
const handleDeleteFiles_1 = require("./handlers/handleDeleteFiles");
const handleCreateFiles_1 = require("./handlers/handleCreateFiles");
const handleRenameFiles_1 = require("./handlers/handleRenameFiles");
// Enriched later
const context = {
    connection: require.main === module
        ? node_1.createConnection(node_1.ProposedFeatures.all)
        : node_1.createConnection(process.stdin, process.stdout),
    documents: new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument),
    capabilities: {},
    parser: {},
    trees: {},
    symbols: {},
    namespaces: {},
    dependencies: new dependencies_1.DependencyMap(),
    docs: documentation_1.getDocumentation(),
};
function registerHandlers() {
    const { connection, documents } = context;
    const handleInitialize = handleInitialize_1.getInitializeHandler(context);
    const handleInitialized = handleInitialized_1.getInitializedHandler(context);
    const handleDidChangeContent = handleDidChangeContent_1.getDidChangeContentHandler(context);
    const handleCompletion = handleCompletion_1.getCompletionHandler(context);
    const handleCompletionResolve = handleCompletionResolve_1.getCompletionResolveHandler(context);
    const handleDefinition = handleDefinition_1.getDefinitionHandler(context);
    const handleDocumentHighlight = handleDocumentHighlight_1.getDocumentHighlightHandler(context);
    const handleDocumentSymbol = handleDocumentSymbol_1.getDocumentSymbolHandler(context);
    const handleWorkspaceSymbol = handleWorkspaceSymbol_1.getWorkspaceSymbolHandler(context);
    const handleReferences = handleReferences_1.getReferencesHandler(context);
    const handleHover = handleHover_1.getHoverHandler(context);
    const handleSemanticTokens = handleSemanticTokens_1.getSemanticTokensHandler(context);
    const handlePrepareRename = handlePrepareRename_1.getPrepareRenameHandler(context);
    const handleRenameRequest = handleRenameRequest_1.getRenameRequestHandler(context);
    const handleDocumentFormatting = handleDocumentFormatting_1.getDocumentFormattingHandler(context);
    const handleDidDeleteFiles = handleDeleteFiles_1.getDidDeleteFilesHandler(context);
    const handleCreateFiles = handleCreateFiles_1.getCreateFilesHandler(context);
    const handleRenameFiles = handleRenameFiles_1.getRenameFilesHandler(context);
    connection.onInitialize(handleInitialize);
    connection.onInitialized(handleInitialized);
    documents.onDidChangeContent(handleDidChangeContent);
    connection.onCompletion(handleCompletion);
    connection.onCompletionResolve(handleCompletionResolve);
    connection.onDefinition(handleDefinition);
    connection.onDocumentHighlight(handleDocumentHighlight);
    connection.onDocumentSymbol(handleDocumentSymbol);
    connection.onWorkspaceSymbol(handleWorkspaceSymbol);
    connection.onReferences(handleReferences);
    connection.onHover(handleHover);
    connection.onRequest('getSemanticTokens', handleSemanticTokens);
    connection.onPrepareRename(handlePrepareRename);
    connection.onRenameRequest(handleRenameRequest);
    connection.onDocumentFormatting(handleDocumentFormatting);
    connection.workspace.onWillDeleteFiles(handleDeleteFiles_1.handleWillDeleteFiles);
    connection.workspace.onDidDeleteFiles(handleDidDeleteFiles);
    connection.workspace.onDidCreateFiles(handleCreateFiles);
    connection.workspace.onDidRenameFiles(handleRenameFiles);
}
function main(cliOptions) {
    const { documents, connection } = context;
    if (cliOptions)
        context.cliOptions = cliOptions;
    registerHandlers();
    documents.listen(connection);
    connection.listen();
}
exports.main = main;
if (require.main === module)
    main();
//# sourceMappingURL=server.js.map