/// <reference types="node" />
import { URL } from 'url';
import { Position } from 'vscode-languageserver-textdocument';
import { Range, URI } from 'vscode-languageserver/node';
import { Point, SyntaxNode, Tree } from 'web-tree-sitter';
import { NamespaceMap } from './interfaces';
export declare function nodesGen(node: SyntaxNode): Generator<SyntaxNode, void, unknown>;
export declare function findParent(start: SyntaxNode, predicate: (n: SyntaxNode) => boolean): SyntaxNode | null;
export declare function getRange(node: SyntaxNode): Range;
export declare function getNodeAt(tree: Tree, line: number, column: number): SyntaxNode | null;
export declare function getNodeAtRange(tree: Tree, range: Range): SyntaxNode | null;
/** Get textual representation of the node (variable name, field & array reference, but not function name) */
export declare function getName(node: SyntaxNode): string | null;
export declare function getFunctionName(node: SyntaxNode): string;
export declare function isDefinition(node: SyntaxNode): boolean;
export declare function isParamList(node: SyntaxNode): boolean;
export declare function isReference(node: SyntaxNode): boolean;
export declare function isInclude(node: SyntaxNode): boolean;
export declare function isFunction(node: SyntaxNode): boolean;
export declare function isIdentifier(node: SyntaxNode): boolean;
export declare function findReferences(startingNode: SyntaxNode, startingNamespaces: NamespaceMap, searchedNode: SyntaxNode, searchedNamespaces: NamespaceMap): Range[];
export declare function getQueriesList(queriesRawText: string): string[];
export declare function getDependencyUrl(node: SyntaxNode, baseUri: string): URL;
export declare function positionToPoint(pos: Position): Point;
export declare function pointToPosition(point: Point): Position;
export declare function getFunctionSignature(node: SyntaxNode): string;
export declare function getPrecedingComments(node: SyntaxNode | null): string;
/** Get function node if given node is defined among its parameters */
export declare function getParentFunction(node: SyntaxNode): SyntaxNode | null;
/** Get function name if node is defined among its parameters */
export declare function getParentFunctionName(node: SyntaxNode): string | null;
export declare function isLoop(node: SyntaxNode): boolean;
export declare function isSwitch(node: SyntaxNode): boolean;
export declare function isAwkExtension(path: URI | string): boolean;
export declare function isBlock(node: SyntaxNode): boolean;
export declare function isNamespace(node: SyntaxNode): boolean;
export declare function isPositionWithinRange(position: Position, range: Range): boolean;
export declare function isNodeWithinRange(node: SyntaxNode, range: Range): boolean;
/** Get namespace which node belongs to */
export declare function getNamespace(node: SyntaxNode, namespaces: NamespaceMap): string;
export declare function isAssignment(node: SyntaxNode): boolean;
/** Get namespace name on directive node */
export declare function getNamespaceName(node: SyntaxNode): string;
