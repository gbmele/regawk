"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVariableHint = exports.getFunctionHint = exports.getBuiltinHints = void 0;
const documentation_1 = require("./documentation");
const utils_1 = require("./utils");
const path_1 = require("path");
let builtinHints;
function formatHint(title, description) {
    return '```\n' + title + '\n```\n\n' + description + '\n\n';
}
function formatDocItem(docSection, title) {
    return formatHint(title, docSection[title].replace(/\\n/g, '\n\n'));
}
function getBuiltinHints(docs) {
    if (builtinHints)
        return builtinHints;
    const builtins_section = {};
    const functions = {};
    const io_statements = {
        // These have many special cases
        getline: '',
        print: '',
        printf: '',
    };
    const patterns = {};
    for (const title of Object.keys(docs.builtins)) {
        builtins_section[title] = formatDocItem(docs.builtins, title);
    }
    for (const title of Object.keys(docs.functions)) {
        functions[documentation_1.dropParamList(title)] = formatDocItem(docs.functions, title);
    }
    for (const title of Object.keys(docs.io_statements)) {
        if (title.includes('(')) {
            io_statements[documentation_1.dropParamList(title)] = formatHint(title, docs.io_statements[title]);
        }
        else if (title.includes('getline')) {
            io_statements['getline'] += formatHint(title, docs.io_statements[title]);
        }
        else if (title.includes('printf')) {
            io_statements['printf'] += formatHint(title, docs.io_statements[title]);
        }
        else if (title.includes('print')) {
            io_statements['print'] += formatHint(title, docs.io_statements[title]);
        }
        else {
            io_statements[title] = docs.io_statements[title];
        }
    }
    for (const title of Object.keys(docs.patterns)) {
        builtins_section[title] = formatDocItem(docs.patterns, title);
    }
    builtinHints = Object.assign(Object.assign(Object.assign(Object.assign({}, builtins_section), functions), io_statements), patterns);
    return builtinHints;
}
exports.getBuiltinHints = getBuiltinHints;
function getFunctionHint(funcDefinitionNode) {
    const signature = utils_1.getFunctionSignature(funcDefinitionNode);
    const precedingComments = utils_1.getPrecedingComments(funcDefinitionNode);
    return formatHint(signature, precedingComments.replace(/\n/g, '\n\n'));
}
exports.getFunctionHint = getFunctionHint;
function getVariableHint(definitionText, uri) {
    const filename = path_1.basename(uri);
    return `Variable defined at [${filename}](${uri})\n\n` + formatHint(definitionText, '');
}
exports.getVariableHint = getVariableHint;
//# sourceMappingURL=hints.js.map