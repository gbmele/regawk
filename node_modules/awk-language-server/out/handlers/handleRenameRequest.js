"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRenameRequestHandler = void 0;
const node_1 = require("vscode-languageserver-protocol/node");
const utils_1 = require("../utils");
function getRenameRequestHandler(context) {
    const { trees, namespaces, dependencies } = context;
    return function handleRenameRequest(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { position, textDocument, newName } = params;
            const node = utils_1.getNodeAt(trees[textDocument.uri], position.line, position.character);
            if (!node || !utils_1.isIdentifier(node))
                return null;
            const parentFunction = utils_1.getParentFunction(node);
            // Parameter rename
            if (parentFunction) {
                const edits = {
                    changes: {
                        [textDocument.uri]: [],
                    },
                };
                edits.changes[textDocument.uri] = utils_1.findReferences(parentFunction, namespaces[textDocument.uri], node, namespaces[textDocument.uri]).map((r) => node_1.TextEdit.replace(r, newName));
                return edits;
            }
            // Function and variable rename
            const linkedUris = dependencies.getLinkedUris(textDocument.uri);
            const edits = {};
            for (const uri of linkedUris) {
                if (!trees[uri])
                    continue;
                if (!edits.changes)
                    edits.changes = {};
                if (!edits.changes[uri])
                    edits.changes[uri] = [];
                edits.changes[uri] = utils_1.findReferences(trees[uri].rootNode, namespaces[uri], node, namespaces[textDocument.uri]).map((r) => node_1.TextEdit.replace(r, newName));
            }
            return edits;
        });
    };
}
exports.getRenameRequestHandler = getRenameRequestHandler;
//# sourceMappingURL=handleRenameRequest.js.map