"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRenameFilesHandler = exports.adaptFolderRenames = void 0;
const path_1 = require("path");
const node_1 = require("vscode-languageserver/node");
const io_1 = require("../io");
const utils_1 = require("../utils");
function getIncludes(tree) {
    return tree.rootNode.namedChildren.filter(utils_1.isInclude);
}
function getIncludeEdits(changes, trees) {
    const result = {};
    for (const [parentUri, renames] of changes) {
        if (!result[parentUri])
            result[parentUri] = [];
        const parentDirUri = path_1.dirname(parentUri);
        for (const r of renames) {
            const oldRelPath = path_1.relative(parentDirUri, r.oldUri);
            const newRelPath = path_1.relative(parentDirUri, r.newUri);
            const oldIncludeNode = getIncludes(trees[parentUri]).find((n) => {
                const includeText = n.lastNamedChild.text.replace(/"/g, '');
                if (utils_1.isAwkExtension(includeText)) {
                    return includeText === oldRelPath;
                }
                return `${includeText}.awk` === oldRelPath;
            });
            if (!oldIncludeNode)
                continue;
            const range = utils_1.getRange(oldIncludeNode);
            const newIncludeText = newRelPath.endsWith('.awk')
                ? newRelPath.slice(0, -4)
                : newRelPath;
            result[parentUri].push(node_1.TextEdit.replace(range, `@include "${newIncludeText}"`));
        }
    }
    return result;
}
/**
 * Adapt folder renames to file renames
 */
function adaptFolderRenames(files) {
    return (files
        .flatMap(({ oldUri, newUri }) => {
        // newUri because handling DidRename
        if (io_1.isDir(newUri)) {
            return io_1.getAwkFilesInDir(newUri).map((fileUrl) => {
                const separator = oldUri.endsWith('/') ? '' : '/';
                return {
                    oldUri: oldUri + separator + path_1.basename(fileUrl.toString()),
                    newUri: fileUrl.toString(),
                };
            });
        }
        return { oldUri, newUri };
    })
        // This is a workaround
        // https://github.com/microsoft/vscode-languageserver-node/issues/734
        .filter(({ newUri }) => utils_1.isAwkExtension(newUri)));
}
exports.adaptFolderRenames = adaptFolderRenames;
function getRenameFilesHandler(context) {
    const { trees, symbols, namespaces, dependencies } = context;
    return function handleRenameFiles(params) {
        const fileRenames = adaptFolderRenames(params.files);
        // Multiple file renames might result in multiple changes to the same parent document
        // This allows to aggregate such changes and not change the same file multiple times
        const changesInParents = new Map();
        for (const file of fileRenames) {
            trees[file.newUri] = trees[file.oldUri];
            symbols[file.newUri] = symbols[file.oldUri];
            namespaces[file.newUri] = namespaces[file.oldUri];
            delete trees[file.oldUri];
            delete symbols[file.oldUri];
            delete namespaces[file.oldUri];
            const depNode = dependencies.get(file.oldUri);
            for (const childUri of depNode.childrenUris) {
                dependencies.get(childUri).parentUris.delete(file.oldUri);
                dependencies.get(childUri).parentUris.add(file.newUri);
            }
            for (const parentUri of depNode.parentUris) {
                dependencies.get(parentUri).childrenUris.delete(file.oldUri);
                dependencies.get(parentUri).childrenUris.add(file.newUri);
                if (!changesInParents.has(parentUri))
                    changesInParents.set(parentUri, []);
                changesInParents.get(parentUri).push(file);
            }
            dependencies.set(file.newUri, depNode);
            dependencies.delete(file.oldUri);
        }
        context.connection.workspace.applyEdit({
            changes: getIncludeEdits(changesInParents, trees),
        });
    };
}
exports.getRenameFilesHandler = getRenameFilesHandler;
//# sourceMappingURL=handleRenameFiles.js.map