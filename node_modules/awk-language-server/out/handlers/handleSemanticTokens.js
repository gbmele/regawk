"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSemanticTokensHandler = void 0;
const fs_1 = require("fs");
const utils_1 = require("../utils");
const path = require("path");
function getSemanticTokensHandler(context) {
    const { trees, connection } = context;
    return function handleSemanticTokens(params) {
        const { textDocument } = params;
        const tree = trees[textDocument.uri];
        const lang = tree.getLanguage();
        const highlightsPath = path.resolve(require.resolve('tree-sitter-awk'), '..', '..', '..', 'queries', 'highlights.scm');
        const queriesText = fs_1.readFileSync(highlightsPath, 'utf8');
        const queriesList = utils_1.getQueriesList(queriesText).reverse(); // Reverse to prioritize in tree-sitter manner
        const captures = [];
        for (const queryString of queriesList) {
            const query = lang.query(queryString);
            if (query.captureNames.length > 1) {
                connection.console.warn(`Got more than 1 captureNames: ${query.captureNames.join(', ')}`);
            }
            captures.push(...query.captures(tree.rootNode));
        }
        return captures.map(({ name, node }) => ({
            line: node.startPosition.row,
            startChar: node.startPosition.column,
            length: node.endIndex - node.startIndex,
            tokenType: name,
            tokenModifiers: [],
        }));
    };
}
exports.getSemanticTokensHandler = getSemanticTokensHandler;
//# sourceMappingURL=handleSemanticTokens.js.map