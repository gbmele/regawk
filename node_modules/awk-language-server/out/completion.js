"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.symbolInfoToCompletionItem = exports.enrichWithSymbolInfo = exports.enrichWithDocumentation = exports.getPredefinedCompletionItems = exports.initCompletionList = void 0;
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const documentation_1 = require("./documentation");
const utils_1 = require("./utils");
const predefinedCompletionListLight = [];
function initCompletionList(docs) {
    predefinedCompletionListLight.push(...Object.keys(docs.builtins).map((key, i) => ({
        label: key,
        kind: vscode_languageserver_types_1.CompletionItemKind.Variable,
        data: `builtins.${key}`,
    })));
    predefinedCompletionListLight.push(...Object.keys(docs.functions).map((key, i) => ({
        label: documentation_1.dropParamList(key),
        kind: vscode_languageserver_types_1.CompletionItemKind.Function,
        data: `functions.${key}`,
    })));
    predefinedCompletionListLight.push(...Object.keys(docs.io_statements).map((key, i) => ({
        label: key,
        kind: vscode_languageserver_types_1.CompletionItemKind.Snippet,
        data: `io_statements.${key}`,
    })));
    predefinedCompletionListLight.push(...Object.keys(docs.patterns).map((key, i) => ({
        label: key,
        kind: vscode_languageserver_types_1.CompletionItemKind.Keyword,
        data: `patterns.${key}`,
    })));
}
exports.initCompletionList = initCompletionList;
function getPredefinedCompletionItems() {
    return predefinedCompletionListLight;
}
exports.getPredefinedCompletionItems = getPredefinedCompletionItems;
function enrichWithDocumentation(item, docs) {
    const path = item.data.split('.');
    const documentation = docs[path[0]][path[1]];
    item.detail = path[1];
    item.documentation = documentation;
}
exports.enrichWithDocumentation = enrichWithDocumentation;
function enrichWithSymbolInfo(item, tree) {
    const { symbolInfo } = item.data;
    if (item.kind === vscode_languageserver_types_1.CompletionItemKind.Function) {
        const node = utils_1.getNodeAtRange(tree, symbolInfo.location.range);
        item.detail = utils_1.getFunctionSignature(node);
        item.documentation = utils_1.getPrecedingComments(node);
    }
    else if (item.kind === vscode_languageserver_types_1.CompletionItemKind.Variable) {
        item.detail = `User defined variable`;
    }
}
exports.enrichWithSymbolInfo = enrichWithSymbolInfo;
const symbolCompletionKindMap = {
    [vscode_languageserver_types_1.SymbolKind.Function]: vscode_languageserver_types_1.CompletionItemKind.Function,
    [vscode_languageserver_types_1.SymbolKind.Variable]: vscode_languageserver_types_1.CompletionItemKind.Variable,
};
function getCompletionKind(symbolInfo, namespaceUnderCursor) {
    var _a;
    if (((_a = symbolInfo.containerName) === null || _a === void 0 ? void 0 : _a.includes('::')) &&
        symbolInfo.containerName !== namespaceUnderCursor) {
        return vscode_languageserver_types_1.CompletionItemKind.Text;
    }
    return symbolCompletionKindMap[symbolInfo.kind] || vscode_languageserver_types_1.CompletionItemKind.Text;
}
function symbolInfoToCompletionItem(symbolInfo, namespaceUnderCursor) {
    var _a;
    const label = symbolInfo.containerName === namespaceUnderCursor ||
        ((_a = symbolInfo.containerName) === null || _a === void 0 ? void 0 : _a.includes('::'))
        ? symbolInfo.name
        : `${symbolInfo.containerName}::${symbolInfo.name}`;
    const compItem = vscode_languageserver_types_1.CompletionItem.create(label);
    compItem.kind = getCompletionKind(symbolInfo, namespaceUnderCursor);
    // For now this interface differs from '.data' for builtins
    compItem.data = {
        type: 'user_defined',
        symbolInfo,
    };
    return compItem;
}
exports.symbolInfoToCompletionItem = symbolInfoToCompletionItem;
//# sourceMappingURL=completion.js.map