"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDir = exports.getAwkFilesInDir = exports.readDocumentFromUrl = void 0;
const fs_1 = require("fs");
const url_1 = require("url");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const utils_1 = require("./utils");
function readDocumentFromUrl(context, url) {
    let content;
    try {
        content = fs_1.readFileSync(url, 'utf8');
    }
    catch (err) {
        const { message, name } = err;
        context.connection.console.error(`${name}: ${message}`);
        return null;
    }
    return vscode_languageserver_textdocument_1.TextDocument.create(url.href, 'awk', 0, content);
}
exports.readDocumentFromUrl = readDocumentFromUrl;
/** Get files ending with .awk or .gawk recursively */
function getAwkFilesInDir(uri) {
    const result = [];
    const url = new url_1.URL(uri);
    try {
        fs_1.accessSync(url, fs_1.constants.R_OK);
    }
    catch (_err) {
        return [];
    }
    for (const dirent of fs_1.readdirSync(url, { withFileTypes: true })) {
        if (utils_1.isAwkExtension(dirent.name)) {
            result.push(new url_1.URL(`${uri}/${dirent.name}`));
            continue;
        }
        if (dirent.isDirectory()) {
            result.push(...getAwkFilesInDir(`${uri}/${dirent.name}`));
        }
    }
    return result;
}
exports.getAwkFilesInDir = getAwkFilesInDir;
function isDir(uri) {
    return fs_1.statSync(new url_1.URL(uri)).isDirectory();
}
exports.isDir = isDir;
//# sourceMappingURL=io.js.map